{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\final-year-project\\\\client\\\\src\\\\pages\\\\questions\\\\array.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport HomeLayout from \"../../layout/HomeLayout/HomeLayout\";\nimport Splash from \"../../components/splash/splash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questionsData = {\n  questions: [{\n    title: \"Check if pair with given Sum exists in Array (Two Sum)\",\n    description: \"Given an array A[ ] of n numbers and another number x, the task is to check whether or not there exist two elements in A[] whose sum is exactly x.\",\n    examples: [{\n      input: {\n        arr: [0, -1, 2, -3, 1],\n        x: -2\n      },\n      output: \"Yes\",\n      explanation: \"If we calculate the sum of the output, 1 + (-3) = -2\"\n    }, {\n      input: {\n        arr: [1, -2, 1, 0, 5],\n        x: 0\n      },\n      output: \"No\",\n      explanation: \"Since the array is in decreasing order, no possible way exists to solve the problem.\"\n    }]\n  }, {\n    title: \"Best Time to Buy and Sell Stock\",\n    description: \"Given an array prices[] of length N, representing the prices of the stocks on different days, the task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed.\",\n    examples: [{\n      input: {\n        prices: [7, 1, 5, 3, 6, 4]\n      },\n      output: 5,\n      explanation: \"The lowest price of the stock is on the 2nd day, i.e. price = 1. Starting from the 2nd day, the highest price of the stock is witnessed on the 5th day, i.e. price = 6. Therefore, maximum possible profit = 6 – 1 = 5.\"\n    }, {\n      input: {\n        prices: [7, 6, 4, 3, 1]\n      },\n      output: 0,\n      explanation: \"Since the array is in decreasing order, no possible way exists to solve the problem.\"\n    }]\n  }, {\n    title: \"Find duplicates in O(n) time and O(1) extra space | Set 1\",\n    description: \"Given an array of n elements that contains elements from 0 to n-1, with any of these numbers appearing any number of times. Find these repeating numbers in O(n) and use only constant memory space.\",\n    examples: [{\n      input: {\n        n: 7,\n        array: [1, 2, 3, 6, 3, 6, 1]\n      },\n      output: [1, 3, 6],\n      explanation: \"The numbers 1, 3, and 6 appear more than once in the array.\"\n    }]\n  }, {\n    title: \"Product of Array except itself\",\n    description: \"Given an array arr[] of n integers, construct a Product Array prod[] (of the same size) such that prod[i] is equal to the product of all the elements of arr[] except arr[i].\",\n    examples: [{\n      input: {\n        arr: [10, 3, 5, 6, 2]\n      },\n      output: [180, 600, 360, 300, 900],\n      explanation: \"Product of other array elements except 10 is 180, and so on.\"\n    }]\n  }, {\n    title: \"Largest Sum Contiguous Subarray (Kadane’s Algorithm)\",\n    description: \"Given an array arr[] of size N, find the sum of the contiguous subarray within an arr[] with the largest sum.\"\n  }, {\n    title: \"Maximum Product Subarray\",\n    description: \"Given an array that contains both positive and negative integers, the task is to find the product of the maximum product subarray.\",\n    examples: [{\n      input: {\n        arr: [6, -3, -10, 0, 2]\n      },\n      output: 180,\n      explanation: \"The subarray is [6, -3, -10].\"\n    }, {\n      input: {\n        arr: [-1, -3, -10, 0, 60]\n      },\n      output: 60,\n      explanation: \"The subarray is [60].\"\n    }]\n  }, {\n    title: \"Find the Minimum element in a Sorted and Rotated Array\",\n    description: \"Given a sorted array arr[] (may be distinct or may contain duplicates) of size N that is rotated at some unknown point, the task is to find the minimum element in it.\",\n    examples: [{\n      input: {\n        arr: [5, 6, 1, 2, 3, 4]\n      },\n      output: 1,\n      explanation: \"1 is the minimum element present in the array.\"\n    }, {\n      input: {\n        arr: [1, 2, 3, 4]\n      },\n      output: 1\n    }]\n  }, {\n    title: \"Search an element in a sorted and rotated Array\",\n    description: \"Given a sorted and rotated array arr[] of size N and a key, the task is to find the key in the array.\"\n  }, {\n    title: \"Trapping Rain Water\",\n    description: \"Given an array of N non-negative integers arr[] representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\"\n  }, {\n    title: \"Insert in sorted and non-overlapping interval array\",\n    description: \"Given a set of non-overlapping intervals and a new interval, insert the interval at the correct position. If the insertion results in overlapping intervals, then merge the overlapping intervals.\",\n    examples: [{\n      input: {\n        set: [[1, 3], [6, 9]],\n        newInterval: [2, 5]\n      },\n      output: [[1, 5], [6, 9]],\n      explanation: \"The correct position to insert the new interval [2, 5] is between the two given intervals. The resulting set would have been [1, 3], [2, 5], [6, 9], but the intervals [1, 3], [2, 5] are overlapping. So, they are merged together in one interval [1, 5].\"\n    }, {\n      input: {\n        set: [[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]],\n        newInterval: [4, 9]\n      },\n      output: [[1, 2], [3, 10], [12, 16]],\n      explanation: \"First, the interval is inserted between intervals [3, 5] and [6, 7]. Then overlapping intervals are merged together.\"\n    }]\n  }, {\n    title: \"A Boolean Matrix Question\",\n    description: \"Given a boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 (or true) then make all the cells of the ith row and jth column as 1.\"\n  }, {\n    title: \"Print a given matrix in spiral form\",\n    description: \"Given a 2D array, print it in spiral form.\"\n  }, {\n    title: \"Program to find transpose of a matrix\",\n    description: \"Given a matrix of size N X M, find the transpose of the matrix. Transpose of a matrix is obtained by changing rows to columns and columns to rows.\"\n  }, {\n    title: \"Search a Word in a 2D Grid of characters (Word Search)\",\n    description: \"Given a 2D grid of characters and a single word/an array of words, find all occurrences of the given word/words in the grid.\"\n  }]\n};\nconst QuestionsList = ({\n  questions\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  setTimeout(() => {\n    setLoading(false);\n  }, 2000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: question.examples.map((example, exampleIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Example \", exampleIndex + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Input:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 21\n              }, this), \" \", JSON.stringify(example.input)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Output:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 21\n              }, this), \" \", JSON.stringify(example.output)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this), example.explanation && /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Explanation:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 23\n              }, this), \" \", example.explanation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this)]\n        }, exampleIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionsList, \"f5+PNgTuglc1SH4muD2ARXwXaJw=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionsList;\nconst App = () => {\n  _s2();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  setTimeout(() => {\n    setLoading(false);\n  }, 2000);\n  return /*#__PURE__*/_jsxDEV(HomeLayout, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Splash, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n      style: {\n        padding: \"60px 24px 100px 24px\",\n        backgroundColor: \"#f3f4f6\",\n        height: \"auto\",\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ReactJS Questions List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(QuestionsList, {\n          questions: questionsData.questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"f5+PNgTuglc1SH4muD2ARXwXaJw=\", false, function () {\n  return [useNavigate];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuestionsList\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useNavigate","HomeLayout","Splash","jsxDEV","_jsxDEV","questionsData","questions","title","description","examples","input","arr","x","output","explanation","prices","n","array","set","newInterval","QuestionsList","_s","navigate","loading","setLoading","setTimeout","children","map","question","index","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","example","exampleIndex","JSON","stringify","_c","App","_s2","padding","backgroundColor","height","width","_c2","$RefreshReg$"],"sources":["D:/Project/final-year-project/client/src/pages/questions/array.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport HomeLayout from \"../../layout/HomeLayout/HomeLayout\";\r\nimport Splash from \"../../components/splash/splash\";\r\nconst questionsData = {\r\n  questions: [\r\n    {\r\n      title: \"Check if pair with given Sum exists in Array (Two Sum)\",\r\n      description:\r\n        \"Given an array A[ ] of n numbers and another number x, the task is to check whether or not there exist two elements in A[] whose sum is exactly x.\",\r\n      examples: [\r\n        {\r\n          input: { arr: [0, -1, 2, -3, 1], x: -2 },\r\n          output: \"Yes\",\r\n          explanation: \"If we calculate the sum of the output, 1 + (-3) = -2\",\r\n        },\r\n        {\r\n          input: { arr: [1, -2, 1, 0, 5], x: 0 },\r\n          output: \"No\",\r\n          explanation:\r\n            \"Since the array is in decreasing order, no possible way exists to solve the problem.\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Best Time to Buy and Sell Stock\",\r\n      description:\r\n        \"Given an array prices[] of length N, representing the prices of the stocks on different days, the task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed.\",\r\n      examples: [\r\n        {\r\n          input: { prices: [7, 1, 5, 3, 6, 4] },\r\n          output: 5,\r\n          explanation:\r\n            \"The lowest price of the stock is on the 2nd day, i.e. price = 1. Starting from the 2nd day, the highest price of the stock is witnessed on the 5th day, i.e. price = 6. Therefore, maximum possible profit = 6 – 1 = 5.\",\r\n        },\r\n        {\r\n          input: { prices: [7, 6, 4, 3, 1] },\r\n          output: 0,\r\n          explanation:\r\n            \"Since the array is in decreasing order, no possible way exists to solve the problem.\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Find duplicates in O(n) time and O(1) extra space | Set 1\",\r\n      description:\r\n        \"Given an array of n elements that contains elements from 0 to n-1, with any of these numbers appearing any number of times. Find these repeating numbers in O(n) and use only constant memory space.\",\r\n      examples: [\r\n        {\r\n          input: { n: 7, array: [1, 2, 3, 6, 3, 6, 1] },\r\n          output: [1, 3, 6],\r\n          explanation:\r\n            \"The numbers 1, 3, and 6 appear more than once in the array.\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Product of Array except itself\",\r\n      description:\r\n        \"Given an array arr[] of n integers, construct a Product Array prod[] (of the same size) such that prod[i] is equal to the product of all the elements of arr[] except arr[i].\",\r\n      examples: [\r\n        {\r\n          input: { arr: [10, 3, 5, 6, 2] },\r\n          output: [180, 600, 360, 300, 900],\r\n          explanation:\r\n            \"Product of other array elements except 10 is 180, and so on.\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Largest Sum Contiguous Subarray (Kadane’s Algorithm)\",\r\n      description:\r\n        \"Given an array arr[] of size N, find the sum of the contiguous subarray within an arr[] with the largest sum.\",\r\n    },\r\n    {\r\n      title: \"Maximum Product Subarray\",\r\n      description:\r\n        \"Given an array that contains both positive and negative integers, the task is to find the product of the maximum product subarray.\",\r\n      examples: [\r\n        {\r\n          input: { arr: [6, -3, -10, 0, 2] },\r\n          output: 180,\r\n          explanation: \"The subarray is [6, -3, -10].\",\r\n        },\r\n        {\r\n          input: { arr: [-1, -3, -10, 0, 60] },\r\n          output: 60,\r\n          explanation: \"The subarray is [60].\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Find the Minimum element in a Sorted and Rotated Array\",\r\n      description:\r\n        \"Given a sorted array arr[] (may be distinct or may contain duplicates) of size N that is rotated at some unknown point, the task is to find the minimum element in it.\",\r\n      examples: [\r\n        {\r\n          input: { arr: [5, 6, 1, 2, 3, 4] },\r\n          output: 1,\r\n          explanation: \"1 is the minimum element present in the array.\",\r\n        },\r\n        {\r\n          input: { arr: [1, 2, 3, 4] },\r\n          output: 1,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Search an element in a sorted and rotated Array\",\r\n      description:\r\n        \"Given a sorted and rotated array arr[] of size N and a key, the task is to find the key in the array.\",\r\n    },\r\n    {\r\n      title: \"Trapping Rain Water\",\r\n      description:\r\n        \"Given an array of N non-negative integers arr[] representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\",\r\n    },\r\n    {\r\n      title: \"Insert in sorted and non-overlapping interval array\",\r\n      description:\r\n        \"Given a set of non-overlapping intervals and a new interval, insert the interval at the correct position. If the insertion results in overlapping intervals, then merge the overlapping intervals.\",\r\n      examples: [\r\n        {\r\n          input: {\r\n            set: [\r\n              [1, 3],\r\n              [6, 9],\r\n            ],\r\n            newInterval: [2, 5],\r\n          },\r\n          output: [\r\n            [1, 5],\r\n            [6, 9],\r\n          ],\r\n          explanation:\r\n            \"The correct position to insert the new interval [2, 5] is between the two given intervals. The resulting set would have been [1, 3], [2, 5], [6, 9], but the intervals [1, 3], [2, 5] are overlapping. So, they are merged together in one interval [1, 5].\",\r\n        },\r\n        {\r\n          input: {\r\n            set: [\r\n              [1, 2],\r\n              [3, 5],\r\n              [6, 7],\r\n              [8, 10],\r\n              [12, 16],\r\n            ],\r\n            newInterval: [4, 9],\r\n          },\r\n          output: [\r\n            [1, 2],\r\n            [3, 10],\r\n            [12, 16],\r\n          ],\r\n          explanation:\r\n            \"First, the interval is inserted between intervals [3, 5] and [6, 7]. Then overlapping intervals are merged together.\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"A Boolean Matrix Question\",\r\n      description:\r\n        \"Given a boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 (or true) then make all the cells of the ith row and jth column as 1.\",\r\n    },\r\n    {\r\n      title: \"Print a given matrix in spiral form\",\r\n      description: \"Given a 2D array, print it in spiral form.\",\r\n    },\r\n    {\r\n      title: \"Program to find transpose of a matrix\",\r\n      description:\r\n        \"Given a matrix of size N X M, find the transpose of the matrix. Transpose of a matrix is obtained by changing rows to columns and columns to rows.\",\r\n    },\r\n    {\r\n      title: \"Search a Word in a 2D Grid of characters (Word Search)\",\r\n      description:\r\n        \"Given a 2D grid of characters and a single word/an array of words, find all occurrences of the given word/words in the grid.\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst QuestionsList = ({ questions }) => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  setTimeout(() => {\r\n    setLoading(false);\r\n  }, 2000);\r\n  return (\r\n    <div>\r\n      {questions.map((question, index) => (\r\n        <div key={index} style={{ marginBottom: \"20px\" }}>\r\n          <h3>{question.title}</h3>\r\n          <p>{question.description}</p>\r\n          <ul>\r\n            {question.examples.map((example, exampleIndex) => (\r\n              <li key={exampleIndex}>\r\n                <strong>Example {exampleIndex + 1}:</strong>\r\n                <ul>\r\n                  <li>\r\n                    <strong>Input:</strong> {JSON.stringify(example.input)}\r\n                  </li>\r\n                  <li>\r\n                    <strong>Output:</strong> {JSON.stringify(example.output)}\r\n                  </li>\r\n                  {example.explanation && (\r\n                    <li>\r\n                      <strong>Explanation:</strong> {example.explanation}\r\n                    </li>\r\n                  )}\r\n                </ul>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  setTimeout(() => {\r\n    setLoading(false);\r\n  }, 2000);\r\n  return (\r\n    <HomeLayout>\r\n      {loading ? (\r\n        <Splash />\r\n      ) : (\r\n        <section\r\n          style={{\r\n            padding: \"60px 24px 100px 24px\",\r\n            backgroundColor: \"#f3f4f6\",\r\n            height: \"auto\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <div>\r\n            <h1>ReactJS Questions List</h1>\r\n            <QuestionsList questions={questionsData.questions} />\r\n          </div>\r\n        </section>\r\n      )}\r\n    </HomeLayout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}